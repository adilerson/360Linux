{"ast":null,"code":"import _asyncToGenerator from \"E:/IONIC/360Linux/videoSpin/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { WebPlugin } from '@capacitor/core';\nimport { VideoPlayer } from './web-utils/videoplayer';\nexport class CapacitorVideoPlayerWeb extends WebPlugin {\n  constructor() {\n    super(...arguments);\n    this._players = [];\n  }\n\n  echo(options) {\n    return _asyncToGenerator(function* () {\n      console.log('ECHO', options);\n      return Promise.resolve({\n        result: true,\n        method: 'echo',\n        value: options\n      });\n    })();\n  }\n  /**\n   *  Player initialization\n   *\n   * @param options\n   */\n\n\n  initPlayer(options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'initPlayer',\n          message: 'Must provide a capVideoPlayerOptions object'\n        });\n      }\n\n      const mode = options.mode ? options.mode : '';\n\n      if (mode == null || mode.length === 0) {\n        return Promise.resolve({\n          result: false,\n          method: 'initPlayer',\n          message: 'Must provide a Mode (fullscreen/embedded)'\n        });\n      }\n\n      if (mode === 'fullscreen' || mode === 'embedded') {\n        const url = options.url ? options.url : '';\n\n        if (url == null || url.length === 0) {\n          return Promise.resolve({\n            result: false,\n            method: 'initPlayer',\n            message: 'Must provide a Video Url'\n          });\n        }\n\n        if (url == 'internal') {\n          return Promise.resolve({\n            result: false,\n            method: 'initPlayer',\n            message: 'Internal Videos not supported on Web Platform'\n          });\n        }\n\n        const playerId = options.playerId ? options.playerId : '';\n\n        if (playerId == null || playerId.length === 0) {\n          return Promise.resolve({\n            result: false,\n            method: 'initPlayer',\n            message: 'Must provide a Player Id'\n          });\n        }\n\n        const rate = options.rate ? options.rate : 1.0;\n        let exitOnEnd = true;\n\n        if (Object.keys(options).includes('exitOnEnd')) {\n          const exitRet = options.exitOnEnd;\n          exitOnEnd = exitRet != null ? exitRet : true;\n        }\n\n        let loopOnEnd = false;\n\n        if (Object.keys(options).includes('loopOnEnd') && !exitOnEnd) {\n          const loopRet = options.loopOnEnd;\n          loopOnEnd = loopRet != null ? loopRet : false;\n        }\n\n        const componentTag = options.componentTag ? options.componentTag : '';\n\n        if (componentTag == null || componentTag.length === 0) {\n          return Promise.resolve({\n            result: false,\n            method: 'initPlayer',\n            message: 'Must provide a Component Tag'\n          });\n        }\n\n        let playerSize = null;\n\n        if (mode === 'embedded') {\n          playerSize = _this.checkSize(options);\n        }\n\n        const result = yield _this._initializeVideoPlayer(url, playerId, mode, rate, exitOnEnd, loopOnEnd, componentTag, playerSize);\n        return Promise.resolve({\n          result: result\n        });\n      } else {\n        return Promise.resolve({\n          result: false,\n          method: 'initPlayer',\n          message: 'Must provide a Mode either fullscreen or embedded)'\n        });\n      }\n    })();\n  }\n  /**\n   * Return if a given playerId is playing\n   *\n   * @param options\n   */\n\n\n  isPlaying(options) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'isPlaying',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n\n      let playerId = options.playerId ? options.playerId : '';\n\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n\n      if (_this2._players[playerId]) {\n        const playing = _this2._players[playerId].isPlaying;\n        return Promise.resolve({\n          method: 'isPlaying',\n          result: true,\n          value: playing\n        });\n      } else {\n        return Promise.resolve({\n          method: 'isPlaying',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Play the current video from a given playerId\n   *\n   * @param options\n   */\n\n\n  play(options) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'play',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n\n      let playerId = options.playerId ? options.playerId : '';\n\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n\n      if (_this3._players[playerId]) {\n        yield _this3._players[playerId].videoEl.play();\n        return Promise.resolve({\n          method: 'play',\n          result: true,\n          value: true\n        });\n      } else {\n        return Promise.resolve({\n          method: 'play',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Pause the current video from a given playerId\n   *\n   * @param options\n   */\n\n\n  pause(options) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'pause',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n\n      let playerId = options.playerId ? options.playerId : '';\n\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n\n      if (_this4._players[playerId]) {\n        if (_this4._players[playerId].isPlaying) yield _this4._players[playerId].videoEl.pause();\n        return Promise.resolve({\n          method: 'pause',\n          result: true,\n          value: true\n        });\n      } else {\n        return Promise.resolve({\n          method: 'pause',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the duration of the current video from a given playerId\n   *\n   * @param options\n   */\n\n\n  getDuration(options) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'getDuration',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n\n      let playerId = options.playerId ? options.playerId : '';\n\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n\n      if (_this5._players[playerId]) {\n        const duration = _this5._players[playerId].videoEl.duration;\n        return Promise.resolve({\n          method: 'getDuration',\n          result: true,\n          value: duration\n        });\n      } else {\n        return Promise.resolve({\n          method: 'getDuration',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Set the rate of the current video from a given playerId\n   *\n   * @param options\n   */\n\n\n  setRate(options) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'setRate',\n          message: 'Must provide a capVideoRateOptions object'\n        });\n      }\n\n      let playerId = options.playerId ? options.playerId : '';\n\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n\n      const rateList = [0.25, 0.5, 0.75, 1.0, 2.0, 4.0];\n      console.log(`>>> in plugin options.rate: ${options.rate}`);\n      const rate = options.rate && rateList.includes(options.rate) ? options.rate : 1.0;\n      console.log(`>>> in plugin rate: ${rate}`);\n\n      if (_this6._players[playerId]) {\n        _this6._players[playerId].videoEl.playbackRate = rate;\n        return Promise.resolve({\n          method: 'setRate',\n          result: true,\n          value: rate\n        });\n      } else {\n        return Promise.resolve({\n          method: 'setRate',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the volume of the current video from a given playerId\n   *\n   * @param options\n   */\n\n\n  getRate(options) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'getRate',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n\n      let playerId = options.playerId ? options.playerId : '';\n\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n\n      if (_this7._players[playerId]) {\n        const rate = _this7._players[playerId].videoEl.playbackRate;\n        return Promise.resolve({\n          method: 'getRate',\n          result: true,\n          value: rate\n        });\n      } else {\n        return Promise.resolve({\n          method: 'getRate',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Set the volume of the current video from a given playerId\n   *\n   * @param options\n   */\n\n\n  setVolume(options) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'setVolume',\n          message: 'Must provide a capVideoVolumeOptions object'\n        });\n      }\n\n      let playerId = options.playerId ? options.playerId : '';\n\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n\n      const volume = options.volume ? options.volume : 0.5;\n\n      if (_this8._players[playerId]) {\n        _this8._players[playerId].videoEl.volume = volume;\n        return Promise.resolve({\n          method: 'setVolume',\n          result: true,\n          value: volume\n        });\n      } else {\n        return Promise.resolve({\n          method: 'setVolume',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the volume of the current video from a given playerId\n   *\n   * @param options\n   */\n\n\n  getVolume(options) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'getVolume',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n\n      let playerId = options.playerId ? options.playerId : '';\n\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n\n      if (_this9._players[playerId]) {\n        const volume = _this9._players[playerId].videoEl.volume;\n        return Promise.resolve({\n          method: 'getVolume',\n          result: true,\n          value: volume\n        });\n      } else {\n        return Promise.resolve({\n          method: 'getVolume',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Set the muted property of the current video from a given playerId\n   *\n   * @param options\n   */\n\n\n  setMuted(options) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'setMuted',\n          message: 'Must provide a capVideoMutedOptions object'\n        });\n      }\n\n      let playerId = options.playerId ? options.playerId : '';\n\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n\n      const muted = options.muted ? options.muted : false;\n\n      if (_this10._players[playerId]) {\n        _this10._players[playerId].videoEl.muted = muted;\n        return Promise.resolve({\n          method: 'setMuted',\n          result: true,\n          value: muted\n        });\n      } else {\n        return Promise.resolve({\n          method: 'setMuted',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the muted property of the current video from a given playerId\n   *\n   * @param options\n   */\n\n\n  getMuted(options) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'getMuted',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n\n      let playerId = options.playerId ? options.playerId : '';\n\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n\n      if (_this11._players[playerId]) {\n        const muted = _this11._players[playerId].videoEl.muted;\n        return Promise.resolve({\n          method: 'getMuted',\n          result: true,\n          value: muted\n        });\n      } else {\n        return Promise.resolve({\n          method: 'getMuted',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Set the current time of the current video from a given playerId\n   *\n   * @param options\n   */\n\n\n  setCurrentTime(options) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'setCurrentTime',\n          message: 'Must provide a capVideoTimeOptions object'\n        });\n      }\n\n      let playerId = options.playerId ? options.playerId : '';\n\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n\n      let seekTime = options.seektime ? options.seektime : 0;\n\n      if (_this12._players[playerId]) {\n        const duration = _this12._players[playerId].videoEl.duration;\n        seekTime = seekTime <= duration && seekTime >= 0 ? seekTime : duration / 2;\n        _this12._players[playerId].videoEl.currentTime = seekTime;\n        return Promise.resolve({\n          method: 'setCurrentTime',\n          result: true,\n          value: seekTime\n        });\n      } else {\n        return Promise.resolve({\n          method: 'setCurrentTime',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the current time of the current video from a given playerId\n   *\n   * @param options\n   */\n\n\n  getCurrentTime(options) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        return Promise.resolve({\n          result: false,\n          method: 'getCurrentTime',\n          message: 'Must provide a capVideoPlayerIdOptions object'\n        });\n      }\n\n      let playerId = options.playerId ? options.playerId : '';\n\n      if (playerId == null || playerId.length === 0) {\n        playerId = 'fullscreen';\n      }\n\n      if (_this13._players[playerId]) {\n        const seekTime = _this13._players[playerId].videoEl.currentTime;\n        return Promise.resolve({\n          method: 'getCurrentTime',\n          result: true,\n          value: seekTime\n        });\n      } else {\n        return Promise.resolve({\n          method: 'getCurrentTime',\n          result: false,\n          message: 'Given PlayerId does not exist)'\n        });\n      }\n    })();\n  }\n  /**\n   * Get the current time of the current video from a given playerId\n   *\n   */\n\n\n  stopAllPlayers() {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      for (const i in _this14._players) {\n        if (_this14._players[i].pipMode) {\n          const doc = document;\n\n          if (doc.pictureInPictureElement) {\n            yield doc.exitPictureInPicture();\n          }\n        }\n\n        if (!_this14._players[i].videoEl.paused) _this14._players[i].videoEl.pause();\n      }\n\n      return Promise.resolve({\n        method: 'stopAllPlayers',\n        result: true,\n        value: true\n      });\n    })();\n  }\n\n  checkSize(options) {\n    const playerSize = {\n      width: options.width ? options.width : 320,\n      height: options.height ? options.height : 180\n    };\n    const ratio = playerSize.height / playerSize.width;\n\n    if (playerSize.width > window.innerWidth) {\n      playerSize.width = window.innerWidth;\n      playerSize.height = Math.floor(playerSize.width * ratio);\n    }\n\n    if (playerSize.height > window.innerHeight) {\n      playerSize.height = window.innerHeight;\n      playerSize.width = Math.floor(playerSize.height / ratio);\n    }\n\n    return playerSize;\n  }\n\n  _initializeVideoPlayer(url, playerId, mode, rate, exitOnEnd, loopOnEnd, componentTag, playerSize) {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      const videoURL = url ? url.indexOf('%2F') == -1 ? encodeURI(url) : url : null;\n      if (videoURL === null) return Promise.resolve(false);\n      const videoContainer = yield _this15._getContainerElement(playerId, componentTag);\n      if (videoContainer === null) return Promise.resolve({\n        method: 'initPlayer',\n        result: false,\n        message: 'componentTag or divContainerElement must be provided'\n      });\n      if (mode === 'embedded' && playerSize == null) return Promise.resolve({\n        method: 'initPlayer',\n        result: false,\n        message: 'playerSize must be defined in embedded mode'\n      }); // add listeners\n\n      videoContainer.addEventListener('videoPlayerPlay', ev => {\n        _this15.handlePlayerPlay(ev.detail);\n      });\n      videoContainer.addEventListener('videoPlayerPause', ev => {\n        _this15.handlePlayerPause(ev.detail);\n      });\n      videoContainer.addEventListener('videoPlayerEnded', ev => {\n        if (mode === 'fullscreen') {\n          videoContainer.remove();\n        }\n\n        _this15.handlePlayerEnded(ev.detail);\n      });\n      videoContainer.addEventListener('videoPlayerReady', ev => {\n        _this15.handlePlayerReady(ev.detail);\n      });\n      videoContainer.addEventListener('videoPlayerExit', () => {\n        if (mode === 'fullscreen') {\n          videoContainer.remove();\n        }\n\n        _this15.handlePlayerExit();\n      });\n\n      if (mode === 'embedded') {\n        _this15._players[playerId] = new VideoPlayer('embedded', videoURL, playerId, rate, exitOnEnd, loopOnEnd, videoContainer, 2, playerSize.width, playerSize.height);\n        yield _this15._players[playerId].initialize();\n      } else if (mode === 'fullscreen') {\n        _this15._players['fullscreen'] = new VideoPlayer('fullscreen', videoURL, 'fullscreen', rate, exitOnEnd, loopOnEnd, videoContainer, 99995);\n        yield _this15._players['fullscreen'].initialize();\n      } else {\n        return Promise.resolve({\n          method: 'initPlayer',\n          result: false,\n          message: 'mode not supported'\n        });\n      }\n\n      return Promise.resolve({\n        method: 'initPlayer',\n        result: true,\n        value: true\n      });\n    })();\n  }\n\n  _getContainerElement(playerId, componentTag) {\n    return _asyncToGenerator(function* () {\n      const videoContainer = document.createElement('div');\n      videoContainer.id = `vc_${playerId}`;\n\n      if (componentTag != null && componentTag.length > 0) {\n        const cmpTagEl = document.querySelector(`${componentTag}`);\n        if (cmpTagEl === null) return Promise.resolve(null);\n        let container = null;\n        const shadowRoot = cmpTagEl.shadowRoot ? cmpTagEl.shadowRoot : null;\n\n        if (shadowRoot != null) {\n          container = shadowRoot.querySelector(`[id='${playerId}']`);\n        } else {\n          container = cmpTagEl.querySelector(`[id='${playerId}']`);\n        }\n\n        if (container != null) container.appendChild(videoContainer);\n        return Promise.resolve(videoContainer);\n      } else {\n        return Promise.resolve(null);\n      }\n    })();\n  }\n\n  handlePlayerPlay(data) {\n    this.notifyListeners('jeepCapVideoPlayerPlay', data);\n  }\n\n  handlePlayerPause(data) {\n    this.notifyListeners('jeepCapVideoPlayerPause', data);\n  }\n\n  handlePlayerEnded(data) {\n    this.notifyListeners('jeepCapVideoPlayerEnded', data);\n  }\n\n  handlePlayerExit() {\n    const retData = {\n      dismiss: true\n    };\n    this.notifyListeners('jeepCapVideoPlayerExit', retData);\n  }\n\n  handlePlayerReady(data) {\n    this.notifyListeners('jeepCapVideoPlayerReady', data);\n  }\n\n}","map":{"version":3,"names":["WebPlugin","VideoPlayer","CapacitorVideoPlayerWeb","constructor","arguments","_players","echo","options","console","log","Promise","resolve","result","method","value","initPlayer","message","mode","length","url","playerId","rate","exitOnEnd","Object","keys","includes","exitRet","loopOnEnd","loopRet","componentTag","playerSize","checkSize","_initializeVideoPlayer","isPlaying","playing","play","videoEl","pause","getDuration","duration","setRate","rateList","playbackRate","getRate","setVolume","volume","getVolume","setMuted","muted","getMuted","setCurrentTime","seekTime","seektime","currentTime","getCurrentTime","stopAllPlayers","i","pipMode","doc","document","pictureInPictureElement","exitPictureInPicture","paused","width","height","ratio","window","innerWidth","Math","floor","innerHeight","videoURL","indexOf","encodeURI","videoContainer","_getContainerElement","addEventListener","ev","handlePlayerPlay","detail","handlePlayerPause","remove","handlePlayerEnded","handlePlayerReady","handlePlayerExit","initialize","createElement","id","cmpTagEl","querySelector","container","shadowRoot","appendChild","data","notifyListeners","retData","dismiss"],"sources":["E:/IONIC/360Linux/videoSpin/node_modules/capacitor-video-player/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport { VideoPlayer } from './web-utils/videoplayer';\nexport class CapacitorVideoPlayerWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this._players = [];\n    }\n    async echo(options) {\n        console.log('ECHO', options);\n        return Promise.resolve({ result: true, method: 'echo', value: options });\n    }\n    /**\n     *  Player initialization\n     *\n     * @param options\n     */\n    async initPlayer(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'initPlayer',\n                message: 'Must provide a capVideoPlayerOptions object',\n            });\n        }\n        const mode = options.mode ? options.mode : '';\n        if (mode == null || mode.length === 0) {\n            return Promise.resolve({\n                result: false,\n                method: 'initPlayer',\n                message: 'Must provide a Mode (fullscreen/embedded)',\n            });\n        }\n        if (mode === 'fullscreen' || mode === 'embedded') {\n            const url = options.url ? options.url : '';\n            if (url == null || url.length === 0) {\n                return Promise.resolve({\n                    result: false,\n                    method: 'initPlayer',\n                    message: 'Must provide a Video Url',\n                });\n            }\n            if (url == 'internal') {\n                return Promise.resolve({\n                    result: false,\n                    method: 'initPlayer',\n                    message: 'Internal Videos not supported on Web Platform',\n                });\n            }\n            const playerId = options.playerId ? options.playerId : '';\n            if (playerId == null || playerId.length === 0) {\n                return Promise.resolve({\n                    result: false,\n                    method: 'initPlayer',\n                    message: 'Must provide a Player Id',\n                });\n            }\n            const rate = options.rate ? options.rate : 1.0;\n            let exitOnEnd = true;\n            if (Object.keys(options).includes('exitOnEnd')) {\n                const exitRet = options.exitOnEnd;\n                exitOnEnd = exitRet != null ? exitRet : true;\n            }\n            let loopOnEnd = false;\n            if (Object.keys(options).includes('loopOnEnd') && !exitOnEnd) {\n                const loopRet = options.loopOnEnd;\n                loopOnEnd = loopRet != null ? loopRet : false;\n            }\n            const componentTag = options.componentTag\n                ? options.componentTag\n                : '';\n            if (componentTag == null || componentTag.length === 0) {\n                return Promise.resolve({\n                    result: false,\n                    method: 'initPlayer',\n                    message: 'Must provide a Component Tag',\n                });\n            }\n            let playerSize = null;\n            if (mode === 'embedded') {\n                playerSize = this.checkSize(options);\n            }\n            const result = await this._initializeVideoPlayer(url, playerId, mode, rate, exitOnEnd, loopOnEnd, componentTag, playerSize);\n            return Promise.resolve({ result: result });\n        }\n        else {\n            return Promise.resolve({\n                result: false,\n                method: 'initPlayer',\n                message: 'Must provide a Mode either fullscreen or embedded)',\n            });\n        }\n    }\n    /**\n     * Return if a given playerId is playing\n     *\n     * @param options\n     */\n    async isPlaying(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'isPlaying',\n                message: 'Must provide a capVideoPlayerIdOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        if (this._players[playerId]) {\n            const playing = this._players[playerId].isPlaying;\n            return Promise.resolve({\n                method: 'isPlaying',\n                result: true,\n                value: playing,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'isPlaying',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Play the current video from a given playerId\n     *\n     * @param options\n     */\n    async play(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'play',\n                message: 'Must provide a capVideoPlayerIdOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        if (this._players[playerId]) {\n            await this._players[playerId].videoEl.play();\n            return Promise.resolve({ method: 'play', result: true, value: true });\n        }\n        else {\n            return Promise.resolve({\n                method: 'play',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Pause the current video from a given playerId\n     *\n     * @param options\n     */\n    async pause(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'pause',\n                message: 'Must provide a capVideoPlayerIdOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        if (this._players[playerId]) {\n            if (this._players[playerId].isPlaying)\n                await this._players[playerId].videoEl.pause();\n            return Promise.resolve({ method: 'pause', result: true, value: true });\n        }\n        else {\n            return Promise.resolve({\n                method: 'pause',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Get the duration of the current video from a given playerId\n     *\n     * @param options\n     */\n    async getDuration(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'getDuration',\n                message: 'Must provide a capVideoPlayerIdOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        if (this._players[playerId]) {\n            const duration = this._players[playerId].videoEl.duration;\n            return Promise.resolve({\n                method: 'getDuration',\n                result: true,\n                value: duration,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'getDuration',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Set the rate of the current video from a given playerId\n     *\n     * @param options\n     */\n    async setRate(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'setRate',\n                message: 'Must provide a capVideoRateOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        const rateList = [0.25, 0.5, 0.75, 1.0, 2.0, 4.0];\n        console.log(`>>> in plugin options.rate: ${options.rate}`);\n        const rate = options.rate && rateList.includes(options.rate) ? options.rate : 1.0;\n        console.log(`>>> in plugin rate: ${rate}`);\n        if (this._players[playerId]) {\n            this._players[playerId].videoEl.playbackRate = rate;\n            return Promise.resolve({\n                method: 'setRate',\n                result: true,\n                value: rate,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'setRate',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Get the volume of the current video from a given playerId\n     *\n     * @param options\n     */\n    async getRate(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'getRate',\n                message: 'Must provide a capVideoPlayerIdOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        if (this._players[playerId]) {\n            const rate = this._players[playerId].videoEl.playbackRate;\n            return Promise.resolve({\n                method: 'getRate',\n                result: true,\n                value: rate,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'getRate',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Set the volume of the current video from a given playerId\n     *\n     * @param options\n     */\n    async setVolume(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'setVolume',\n                message: 'Must provide a capVideoVolumeOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        const volume = options.volume ? options.volume : 0.5;\n        if (this._players[playerId]) {\n            this._players[playerId].videoEl.volume = volume;\n            return Promise.resolve({\n                method: 'setVolume',\n                result: true,\n                value: volume,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'setVolume',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Get the volume of the current video from a given playerId\n     *\n     * @param options\n     */\n    async getVolume(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'getVolume',\n                message: 'Must provide a capVideoPlayerIdOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        if (this._players[playerId]) {\n            const volume = this._players[playerId].videoEl.volume;\n            return Promise.resolve({\n                method: 'getVolume',\n                result: true,\n                value: volume,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'getVolume',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Set the muted property of the current video from a given playerId\n     *\n     * @param options\n     */\n    async setMuted(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'setMuted',\n                message: 'Must provide a capVideoMutedOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        const muted = options.muted ? options.muted : false;\n        if (this._players[playerId]) {\n            this._players[playerId].videoEl.muted = muted;\n            return Promise.resolve({\n                method: 'setMuted',\n                result: true,\n                value: muted,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'setMuted',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Get the muted property of the current video from a given playerId\n     *\n     * @param options\n     */\n    async getMuted(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'getMuted',\n                message: 'Must provide a capVideoPlayerIdOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        if (this._players[playerId]) {\n            const muted = this._players[playerId].videoEl.muted;\n            return Promise.resolve({\n                method: 'getMuted',\n                result: true,\n                value: muted,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'getMuted',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Set the current time of the current video from a given playerId\n     *\n     * @param options\n     */\n    async setCurrentTime(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'setCurrentTime',\n                message: 'Must provide a capVideoTimeOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        let seekTime = options.seektime ? options.seektime : 0;\n        if (this._players[playerId]) {\n            const duration = this._players[playerId].videoEl.duration;\n            seekTime =\n                seekTime <= duration && seekTime >= 0 ? seekTime : duration / 2;\n            this._players[playerId].videoEl.currentTime = seekTime;\n            return Promise.resolve({\n                method: 'setCurrentTime',\n                result: true,\n                value: seekTime,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'setCurrentTime',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Get the current time of the current video from a given playerId\n     *\n     * @param options\n     */\n    async getCurrentTime(options) {\n        if (options == null) {\n            return Promise.resolve({\n                result: false,\n                method: 'getCurrentTime',\n                message: 'Must provide a capVideoPlayerIdOptions object',\n            });\n        }\n        let playerId = options.playerId ? options.playerId : '';\n        if (playerId == null || playerId.length === 0) {\n            playerId = 'fullscreen';\n        }\n        if (this._players[playerId]) {\n            const seekTime = this._players[playerId].videoEl.currentTime;\n            return Promise.resolve({\n                method: 'getCurrentTime',\n                result: true,\n                value: seekTime,\n            });\n        }\n        else {\n            return Promise.resolve({\n                method: 'getCurrentTime',\n                result: false,\n                message: 'Given PlayerId does not exist)',\n            });\n        }\n    }\n    /**\n     * Get the current time of the current video from a given playerId\n     *\n     */\n    async stopAllPlayers() {\n        for (const i in this._players) {\n            if (this._players[i].pipMode) {\n                const doc = document;\n                if (doc.pictureInPictureElement) {\n                    await doc.exitPictureInPicture();\n                }\n            }\n            if (!this._players[i].videoEl.paused)\n                this._players[i].videoEl.pause();\n        }\n        return Promise.resolve({\n            method: 'stopAllPlayers',\n            result: true,\n            value: true,\n        });\n    }\n    checkSize(options) {\n        const playerSize = {\n            width: options.width ? options.width : 320,\n            height: options.height ? options.height : 180,\n        };\n        const ratio = playerSize.height / playerSize.width;\n        if (playerSize.width > window.innerWidth) {\n            playerSize.width = window.innerWidth;\n            playerSize.height = Math.floor(playerSize.width * ratio);\n        }\n        if (playerSize.height > window.innerHeight) {\n            playerSize.height = window.innerHeight;\n            playerSize.width = Math.floor(playerSize.height / ratio);\n        }\n        return playerSize;\n    }\n    async _initializeVideoPlayer(url, playerId, mode, rate, exitOnEnd, loopOnEnd, componentTag, playerSize) {\n        const videoURL = url\n            ? url.indexOf('%2F') == -1\n                ? encodeURI(url)\n                : url\n            : null;\n        if (videoURL === null)\n            return Promise.resolve(false);\n        const videoContainer = await this._getContainerElement(playerId, componentTag);\n        if (videoContainer === null)\n            return Promise.resolve({\n                method: 'initPlayer',\n                result: false,\n                message: 'componentTag or divContainerElement must be provided',\n            });\n        if (mode === 'embedded' && playerSize == null)\n            return Promise.resolve({\n                method: 'initPlayer',\n                result: false,\n                message: 'playerSize must be defined in embedded mode',\n            });\n        // add listeners\n        videoContainer.addEventListener('videoPlayerPlay', (ev) => {\n            this.handlePlayerPlay(ev.detail);\n        });\n        videoContainer.addEventListener('videoPlayerPause', (ev) => {\n            this.handlePlayerPause(ev.detail);\n        });\n        videoContainer.addEventListener('videoPlayerEnded', (ev) => {\n            if (mode === 'fullscreen') {\n                videoContainer.remove();\n            }\n            this.handlePlayerEnded(ev.detail);\n        });\n        videoContainer.addEventListener('videoPlayerReady', (ev) => {\n            this.handlePlayerReady(ev.detail);\n        });\n        videoContainer.addEventListener('videoPlayerExit', () => {\n            if (mode === 'fullscreen') {\n                videoContainer.remove();\n            }\n            this.handlePlayerExit();\n        });\n        if (mode === 'embedded') {\n            this._players[playerId] = new VideoPlayer('embedded', videoURL, playerId, rate, exitOnEnd, loopOnEnd, videoContainer, 2, playerSize.width, playerSize.height);\n            await this._players[playerId].initialize();\n        }\n        else if (mode === 'fullscreen') {\n            this._players['fullscreen'] = new VideoPlayer('fullscreen', videoURL, 'fullscreen', rate, exitOnEnd, loopOnEnd, videoContainer, 99995);\n            await this._players['fullscreen'].initialize();\n        }\n        else {\n            return Promise.resolve({\n                method: 'initPlayer',\n                result: false,\n                message: 'mode not supported',\n            });\n        }\n        return Promise.resolve({ method: 'initPlayer', result: true, value: true });\n    }\n    async _getContainerElement(playerId, componentTag) {\n        const videoContainer = document.createElement('div');\n        videoContainer.id = `vc_${playerId}`;\n        if (componentTag != null && componentTag.length > 0) {\n            const cmpTagEl = document.querySelector(`${componentTag}`);\n            if (cmpTagEl === null)\n                return Promise.resolve(null);\n            let container = null;\n            const shadowRoot = cmpTagEl.shadowRoot ? cmpTagEl.shadowRoot : null;\n            if (shadowRoot != null) {\n                container = shadowRoot.querySelector(`[id='${playerId}']`);\n            }\n            else {\n                container = cmpTagEl.querySelector(`[id='${playerId}']`);\n            }\n            if (container != null)\n                container.appendChild(videoContainer);\n            return Promise.resolve(videoContainer);\n        }\n        else {\n            return Promise.resolve(null);\n        }\n    }\n    handlePlayerPlay(data) {\n        this.notifyListeners('jeepCapVideoPlayerPlay', data);\n    }\n    handlePlayerPause(data) {\n        this.notifyListeners('jeepCapVideoPlayerPause', data);\n    }\n    handlePlayerEnded(data) {\n        this.notifyListeners('jeepCapVideoPlayerEnded', data);\n    }\n    handlePlayerExit() {\n        const retData = { dismiss: true };\n        this.notifyListeners('jeepCapVideoPlayerExit', retData);\n    }\n    handlePlayerReady(data) {\n        this.notifyListeners('jeepCapVideoPlayerReady', data);\n    }\n}\n"],"mappings":";AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAO,MAAMC,uBAAN,SAAsCF,SAAtC,CAAgD;EACnDG,WAAW,GAAG;IACV,MAAM,GAAGC,SAAT;IACA,KAAKC,QAAL,GAAgB,EAAhB;EACH;;EACKC,IAAI,CAACC,OAAD,EAAU;IAAA;MAChBC,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,OAApB;MACA,OAAOG,OAAO,CAACC,OAAR,CAAgB;QAAEC,MAAM,EAAE,IAAV;QAAgBC,MAAM,EAAE,MAAxB;QAAgCC,KAAK,EAAEP;MAAvC,CAAhB,CAAP;IAFgB;EAGnB;EACD;AACJ;AACA;AACA;AACA;;;EACUQ,UAAU,CAACR,OAAD,EAAU;IAAA;;IAAA;MACtB,IAAIA,OAAO,IAAI,IAAf,EAAqB;QACjB,OAAOG,OAAO,CAACC,OAAR,CAAgB;UACnBC,MAAM,EAAE,KADW;UAEnBC,MAAM,EAAE,YAFW;UAGnBG,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;;MACD,MAAMC,IAAI,GAAGV,OAAO,CAACU,IAAR,GAAeV,OAAO,CAACU,IAAvB,GAA8B,EAA3C;;MACA,IAAIA,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACC,MAAL,KAAgB,CAApC,EAAuC;QACnC,OAAOR,OAAO,CAACC,OAAR,CAAgB;UACnBC,MAAM,EAAE,KADW;UAEnBC,MAAM,EAAE,YAFW;UAGnBG,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;;MACD,IAAIC,IAAI,KAAK,YAAT,IAAyBA,IAAI,KAAK,UAAtC,EAAkD;QAC9C,MAAME,GAAG,GAAGZ,OAAO,CAACY,GAAR,GAAcZ,OAAO,CAACY,GAAtB,GAA4B,EAAxC;;QACA,IAAIA,GAAG,IAAI,IAAP,IAAeA,GAAG,CAACD,MAAJ,KAAe,CAAlC,EAAqC;UACjC,OAAOR,OAAO,CAACC,OAAR,CAAgB;YACnBC,MAAM,EAAE,KADW;YAEnBC,MAAM,EAAE,YAFW;YAGnBG,OAAO,EAAE;UAHU,CAAhB,CAAP;QAKH;;QACD,IAAIG,GAAG,IAAI,UAAX,EAAuB;UACnB,OAAOT,OAAO,CAACC,OAAR,CAAgB;YACnBC,MAAM,EAAE,KADW;YAEnBC,MAAM,EAAE,YAFW;YAGnBG,OAAO,EAAE;UAHU,CAAhB,CAAP;QAKH;;QACD,MAAMI,QAAQ,GAAGb,OAAO,CAACa,QAAR,GAAmBb,OAAO,CAACa,QAA3B,GAAsC,EAAvD;;QACA,IAAIA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACF,MAAT,KAAoB,CAA5C,EAA+C;UAC3C,OAAOR,OAAO,CAACC,OAAR,CAAgB;YACnBC,MAAM,EAAE,KADW;YAEnBC,MAAM,EAAE,YAFW;YAGnBG,OAAO,EAAE;UAHU,CAAhB,CAAP;QAKH;;QACD,MAAMK,IAAI,GAAGd,OAAO,CAACc,IAAR,GAAed,OAAO,CAACc,IAAvB,GAA8B,GAA3C;QACA,IAAIC,SAAS,GAAG,IAAhB;;QACA,IAAIC,MAAM,CAACC,IAAP,CAAYjB,OAAZ,EAAqBkB,QAArB,CAA8B,WAA9B,CAAJ,EAAgD;UAC5C,MAAMC,OAAO,GAAGnB,OAAO,CAACe,SAAxB;UACAA,SAAS,GAAGI,OAAO,IAAI,IAAX,GAAkBA,OAAlB,GAA4B,IAAxC;QACH;;QACD,IAAIC,SAAS,GAAG,KAAhB;;QACA,IAAIJ,MAAM,CAACC,IAAP,CAAYjB,OAAZ,EAAqBkB,QAArB,CAA8B,WAA9B,KAA8C,CAACH,SAAnD,EAA8D;UAC1D,MAAMM,OAAO,GAAGrB,OAAO,CAACoB,SAAxB;UACAA,SAAS,GAAGC,OAAO,IAAI,IAAX,GAAkBA,OAAlB,GAA4B,KAAxC;QACH;;QACD,MAAMC,YAAY,GAAGtB,OAAO,CAACsB,YAAR,GACftB,OAAO,CAACsB,YADO,GAEf,EAFN;;QAGA,IAAIA,YAAY,IAAI,IAAhB,IAAwBA,YAAY,CAACX,MAAb,KAAwB,CAApD,EAAuD;UACnD,OAAOR,OAAO,CAACC,OAAR,CAAgB;YACnBC,MAAM,EAAE,KADW;YAEnBC,MAAM,EAAE,YAFW;YAGnBG,OAAO,EAAE;UAHU,CAAhB,CAAP;QAKH;;QACD,IAAIc,UAAU,GAAG,IAAjB;;QACA,IAAIb,IAAI,KAAK,UAAb,EAAyB;UACrBa,UAAU,GAAG,KAAI,CAACC,SAAL,CAAexB,OAAf,CAAb;QACH;;QACD,MAAMK,MAAM,SAAS,KAAI,CAACoB,sBAAL,CAA4Bb,GAA5B,EAAiCC,QAAjC,EAA2CH,IAA3C,EAAiDI,IAAjD,EAAuDC,SAAvD,EAAkEK,SAAlE,EAA6EE,YAA7E,EAA2FC,UAA3F,CAArB;QACA,OAAOpB,OAAO,CAACC,OAAR,CAAgB;UAAEC,MAAM,EAAEA;QAAV,CAAhB,CAAP;MACH,CAnDD,MAoDK;QACD,OAAOF,OAAO,CAACC,OAAR,CAAgB;UACnBC,MAAM,EAAE,KADW;UAEnBC,MAAM,EAAE,YAFW;UAGnBG,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;IA1EqB;EA2EzB;EACD;AACJ;AACA;AACA;AACA;;;EACUiB,SAAS,CAAC1B,OAAD,EAAU;IAAA;;IAAA;MACrB,IAAIA,OAAO,IAAI,IAAf,EAAqB;QACjB,OAAOG,OAAO,CAACC,OAAR,CAAgB;UACnBC,MAAM,EAAE,KADW;UAEnBC,MAAM,EAAE,WAFW;UAGnBG,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;;MACD,IAAII,QAAQ,GAAGb,OAAO,CAACa,QAAR,GAAmBb,OAAO,CAACa,QAA3B,GAAsC,EAArD;;MACA,IAAIA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACF,MAAT,KAAoB,CAA5C,EAA+C;QAC3CE,QAAQ,GAAG,YAAX;MACH;;MACD,IAAI,MAAI,CAACf,QAAL,CAAce,QAAd,CAAJ,EAA6B;QACzB,MAAMc,OAAO,GAAG,MAAI,CAAC7B,QAAL,CAAce,QAAd,EAAwBa,SAAxC;QACA,OAAOvB,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,WADW;UAEnBD,MAAM,EAAE,IAFW;UAGnBE,KAAK,EAAEoB;QAHY,CAAhB,CAAP;MAKH,CAPD,MAQK;QACD,OAAOxB,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,WADW;UAEnBD,MAAM,EAAE,KAFW;UAGnBI,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;IA1BoB;EA2BxB;EACD;AACJ;AACA;AACA;AACA;;;EACUmB,IAAI,CAAC5B,OAAD,EAAU;IAAA;;IAAA;MAChB,IAAIA,OAAO,IAAI,IAAf,EAAqB;QACjB,OAAOG,OAAO,CAACC,OAAR,CAAgB;UACnBC,MAAM,EAAE,KADW;UAEnBC,MAAM,EAAE,MAFW;UAGnBG,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;;MACD,IAAII,QAAQ,GAAGb,OAAO,CAACa,QAAR,GAAmBb,OAAO,CAACa,QAA3B,GAAsC,EAArD;;MACA,IAAIA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACF,MAAT,KAAoB,CAA5C,EAA+C;QAC3CE,QAAQ,GAAG,YAAX;MACH;;MACD,IAAI,MAAI,CAACf,QAAL,CAAce,QAAd,CAAJ,EAA6B;QACzB,MAAM,MAAI,CAACf,QAAL,CAAce,QAAd,EAAwBgB,OAAxB,CAAgCD,IAAhC,EAAN;QACA,OAAOzB,OAAO,CAACC,OAAR,CAAgB;UAAEE,MAAM,EAAE,MAAV;UAAkBD,MAAM,EAAE,IAA1B;UAAgCE,KAAK,EAAE;QAAvC,CAAhB,CAAP;MACH,CAHD,MAIK;QACD,OAAOJ,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,MADW;UAEnBD,MAAM,EAAE,KAFW;UAGnBI,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;IAtBe;EAuBnB;EACD;AACJ;AACA;AACA;AACA;;;EACUqB,KAAK,CAAC9B,OAAD,EAAU;IAAA;;IAAA;MACjB,IAAIA,OAAO,IAAI,IAAf,EAAqB;QACjB,OAAOG,OAAO,CAACC,OAAR,CAAgB;UACnBC,MAAM,EAAE,KADW;UAEnBC,MAAM,EAAE,OAFW;UAGnBG,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;;MACD,IAAII,QAAQ,GAAGb,OAAO,CAACa,QAAR,GAAmBb,OAAO,CAACa,QAA3B,GAAsC,EAArD;;MACA,IAAIA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACF,MAAT,KAAoB,CAA5C,EAA+C;QAC3CE,QAAQ,GAAG,YAAX;MACH;;MACD,IAAI,MAAI,CAACf,QAAL,CAAce,QAAd,CAAJ,EAA6B;QACzB,IAAI,MAAI,CAACf,QAAL,CAAce,QAAd,EAAwBa,SAA5B,EACI,MAAM,MAAI,CAAC5B,QAAL,CAAce,QAAd,EAAwBgB,OAAxB,CAAgCC,KAAhC,EAAN;QACJ,OAAO3B,OAAO,CAACC,OAAR,CAAgB;UAAEE,MAAM,EAAE,OAAV;UAAmBD,MAAM,EAAE,IAA3B;UAAiCE,KAAK,EAAE;QAAxC,CAAhB,CAAP;MACH,CAJD,MAKK;QACD,OAAOJ,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,OADW;UAEnBD,MAAM,EAAE,KAFW;UAGnBI,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;IAvBgB;EAwBpB;EACD;AACJ;AACA;AACA;AACA;;;EACUsB,WAAW,CAAC/B,OAAD,EAAU;IAAA;;IAAA;MACvB,IAAIA,OAAO,IAAI,IAAf,EAAqB;QACjB,OAAOG,OAAO,CAACC,OAAR,CAAgB;UACnBC,MAAM,EAAE,KADW;UAEnBC,MAAM,EAAE,aAFW;UAGnBG,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;;MACD,IAAII,QAAQ,GAAGb,OAAO,CAACa,QAAR,GAAmBb,OAAO,CAACa,QAA3B,GAAsC,EAArD;;MACA,IAAIA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACF,MAAT,KAAoB,CAA5C,EAA+C;QAC3CE,QAAQ,GAAG,YAAX;MACH;;MACD,IAAI,MAAI,CAACf,QAAL,CAAce,QAAd,CAAJ,EAA6B;QACzB,MAAMmB,QAAQ,GAAG,MAAI,CAAClC,QAAL,CAAce,QAAd,EAAwBgB,OAAxB,CAAgCG,QAAjD;QACA,OAAO7B,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,aADW;UAEnBD,MAAM,EAAE,IAFW;UAGnBE,KAAK,EAAEyB;QAHY,CAAhB,CAAP;MAKH,CAPD,MAQK;QACD,OAAO7B,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,aADW;UAEnBD,MAAM,EAAE,KAFW;UAGnBI,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;IA1BsB;EA2B1B;EACD;AACJ;AACA;AACA;AACA;;;EACUwB,OAAO,CAACjC,OAAD,EAAU;IAAA;;IAAA;MACnB,IAAIA,OAAO,IAAI,IAAf,EAAqB;QACjB,OAAOG,OAAO,CAACC,OAAR,CAAgB;UACnBC,MAAM,EAAE,KADW;UAEnBC,MAAM,EAAE,SAFW;UAGnBG,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;;MACD,IAAII,QAAQ,GAAGb,OAAO,CAACa,QAAR,GAAmBb,OAAO,CAACa,QAA3B,GAAsC,EAArD;;MACA,IAAIA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACF,MAAT,KAAoB,CAA5C,EAA+C;QAC3CE,QAAQ,GAAG,YAAX;MACH;;MACD,MAAMqB,QAAQ,GAAG,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ,EAAkB,GAAlB,EAAuB,GAAvB,EAA4B,GAA5B,CAAjB;MACAjC,OAAO,CAACC,GAAR,CAAa,+BAA8BF,OAAO,CAACc,IAAK,EAAxD;MACA,MAAMA,IAAI,GAAGd,OAAO,CAACc,IAAR,IAAgBoB,QAAQ,CAAChB,QAAT,CAAkBlB,OAAO,CAACc,IAA1B,CAAhB,GAAkDd,OAAO,CAACc,IAA1D,GAAiE,GAA9E;MACAb,OAAO,CAACC,GAAR,CAAa,uBAAsBY,IAAK,EAAxC;;MACA,IAAI,MAAI,CAAChB,QAAL,CAAce,QAAd,CAAJ,EAA6B;QACzB,MAAI,CAACf,QAAL,CAAce,QAAd,EAAwBgB,OAAxB,CAAgCM,YAAhC,GAA+CrB,IAA/C;QACA,OAAOX,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,SADW;UAEnBD,MAAM,EAAE,IAFW;UAGnBE,KAAK,EAAEO;QAHY,CAAhB,CAAP;MAKH,CAPD,MAQK;QACD,OAAOX,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,SADW;UAEnBD,MAAM,EAAE,KAFW;UAGnBI,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;IA9BkB;EA+BtB;EACD;AACJ;AACA;AACA;AACA;;;EACU2B,OAAO,CAACpC,OAAD,EAAU;IAAA;;IAAA;MACnB,IAAIA,OAAO,IAAI,IAAf,EAAqB;QACjB,OAAOG,OAAO,CAACC,OAAR,CAAgB;UACnBC,MAAM,EAAE,KADW;UAEnBC,MAAM,EAAE,SAFW;UAGnBG,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;;MACD,IAAII,QAAQ,GAAGb,OAAO,CAACa,QAAR,GAAmBb,OAAO,CAACa,QAA3B,GAAsC,EAArD;;MACA,IAAIA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACF,MAAT,KAAoB,CAA5C,EAA+C;QAC3CE,QAAQ,GAAG,YAAX;MACH;;MACD,IAAI,MAAI,CAACf,QAAL,CAAce,QAAd,CAAJ,EAA6B;QACzB,MAAMC,IAAI,GAAG,MAAI,CAAChB,QAAL,CAAce,QAAd,EAAwBgB,OAAxB,CAAgCM,YAA7C;QACA,OAAOhC,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,SADW;UAEnBD,MAAM,EAAE,IAFW;UAGnBE,KAAK,EAAEO;QAHY,CAAhB,CAAP;MAKH,CAPD,MAQK;QACD,OAAOX,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,SADW;UAEnBD,MAAM,EAAE,KAFW;UAGnBI,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;IA1BkB;EA2BtB;EACD;AACJ;AACA;AACA;AACA;;;EACU4B,SAAS,CAACrC,OAAD,EAAU;IAAA;;IAAA;MACrB,IAAIA,OAAO,IAAI,IAAf,EAAqB;QACjB,OAAOG,OAAO,CAACC,OAAR,CAAgB;UACnBC,MAAM,EAAE,KADW;UAEnBC,MAAM,EAAE,WAFW;UAGnBG,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;;MACD,IAAII,QAAQ,GAAGb,OAAO,CAACa,QAAR,GAAmBb,OAAO,CAACa,QAA3B,GAAsC,EAArD;;MACA,IAAIA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACF,MAAT,KAAoB,CAA5C,EAA+C;QAC3CE,QAAQ,GAAG,YAAX;MACH;;MACD,MAAMyB,MAAM,GAAGtC,OAAO,CAACsC,MAAR,GAAiBtC,OAAO,CAACsC,MAAzB,GAAkC,GAAjD;;MACA,IAAI,MAAI,CAACxC,QAAL,CAAce,QAAd,CAAJ,EAA6B;QACzB,MAAI,CAACf,QAAL,CAAce,QAAd,EAAwBgB,OAAxB,CAAgCS,MAAhC,GAAyCA,MAAzC;QACA,OAAOnC,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,WADW;UAEnBD,MAAM,EAAE,IAFW;UAGnBE,KAAK,EAAE+B;QAHY,CAAhB,CAAP;MAKH,CAPD,MAQK;QACD,OAAOnC,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,WADW;UAEnBD,MAAM,EAAE,KAFW;UAGnBI,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;IA3BoB;EA4BxB;EACD;AACJ;AACA;AACA;AACA;;;EACU8B,SAAS,CAACvC,OAAD,EAAU;IAAA;;IAAA;MACrB,IAAIA,OAAO,IAAI,IAAf,EAAqB;QACjB,OAAOG,OAAO,CAACC,OAAR,CAAgB;UACnBC,MAAM,EAAE,KADW;UAEnBC,MAAM,EAAE,WAFW;UAGnBG,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;;MACD,IAAII,QAAQ,GAAGb,OAAO,CAACa,QAAR,GAAmBb,OAAO,CAACa,QAA3B,GAAsC,EAArD;;MACA,IAAIA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACF,MAAT,KAAoB,CAA5C,EAA+C;QAC3CE,QAAQ,GAAG,YAAX;MACH;;MACD,IAAI,MAAI,CAACf,QAAL,CAAce,QAAd,CAAJ,EAA6B;QACzB,MAAMyB,MAAM,GAAG,MAAI,CAACxC,QAAL,CAAce,QAAd,EAAwBgB,OAAxB,CAAgCS,MAA/C;QACA,OAAOnC,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,WADW;UAEnBD,MAAM,EAAE,IAFW;UAGnBE,KAAK,EAAE+B;QAHY,CAAhB,CAAP;MAKH,CAPD,MAQK;QACD,OAAOnC,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,WADW;UAEnBD,MAAM,EAAE,KAFW;UAGnBI,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;IA1BoB;EA2BxB;EACD;AACJ;AACA;AACA;AACA;;;EACU+B,QAAQ,CAACxC,OAAD,EAAU;IAAA;;IAAA;MACpB,IAAIA,OAAO,IAAI,IAAf,EAAqB;QACjB,OAAOG,OAAO,CAACC,OAAR,CAAgB;UACnBC,MAAM,EAAE,KADW;UAEnBC,MAAM,EAAE,UAFW;UAGnBG,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;;MACD,IAAII,QAAQ,GAAGb,OAAO,CAACa,QAAR,GAAmBb,OAAO,CAACa,QAA3B,GAAsC,EAArD;;MACA,IAAIA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACF,MAAT,KAAoB,CAA5C,EAA+C;QAC3CE,QAAQ,GAAG,YAAX;MACH;;MACD,MAAM4B,KAAK,GAAGzC,OAAO,CAACyC,KAAR,GAAgBzC,OAAO,CAACyC,KAAxB,GAAgC,KAA9C;;MACA,IAAI,OAAI,CAAC3C,QAAL,CAAce,QAAd,CAAJ,EAA6B;QACzB,OAAI,CAACf,QAAL,CAAce,QAAd,EAAwBgB,OAAxB,CAAgCY,KAAhC,GAAwCA,KAAxC;QACA,OAAOtC,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,UADW;UAEnBD,MAAM,EAAE,IAFW;UAGnBE,KAAK,EAAEkC;QAHY,CAAhB,CAAP;MAKH,CAPD,MAQK;QACD,OAAOtC,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,UADW;UAEnBD,MAAM,EAAE,KAFW;UAGnBI,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;IA3BmB;EA4BvB;EACD;AACJ;AACA;AACA;AACA;;;EACUiC,QAAQ,CAAC1C,OAAD,EAAU;IAAA;;IAAA;MACpB,IAAIA,OAAO,IAAI,IAAf,EAAqB;QACjB,OAAOG,OAAO,CAACC,OAAR,CAAgB;UACnBC,MAAM,EAAE,KADW;UAEnBC,MAAM,EAAE,UAFW;UAGnBG,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;;MACD,IAAII,QAAQ,GAAGb,OAAO,CAACa,QAAR,GAAmBb,OAAO,CAACa,QAA3B,GAAsC,EAArD;;MACA,IAAIA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACF,MAAT,KAAoB,CAA5C,EAA+C;QAC3CE,QAAQ,GAAG,YAAX;MACH;;MACD,IAAI,OAAI,CAACf,QAAL,CAAce,QAAd,CAAJ,EAA6B;QACzB,MAAM4B,KAAK,GAAG,OAAI,CAAC3C,QAAL,CAAce,QAAd,EAAwBgB,OAAxB,CAAgCY,KAA9C;QACA,OAAOtC,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,UADW;UAEnBD,MAAM,EAAE,IAFW;UAGnBE,KAAK,EAAEkC;QAHY,CAAhB,CAAP;MAKH,CAPD,MAQK;QACD,OAAOtC,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,UADW;UAEnBD,MAAM,EAAE,KAFW;UAGnBI,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;IA1BmB;EA2BvB;EACD;AACJ;AACA;AACA;AACA;;;EACUkC,cAAc,CAAC3C,OAAD,EAAU;IAAA;;IAAA;MAC1B,IAAIA,OAAO,IAAI,IAAf,EAAqB;QACjB,OAAOG,OAAO,CAACC,OAAR,CAAgB;UACnBC,MAAM,EAAE,KADW;UAEnBC,MAAM,EAAE,gBAFW;UAGnBG,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;;MACD,IAAII,QAAQ,GAAGb,OAAO,CAACa,QAAR,GAAmBb,OAAO,CAACa,QAA3B,GAAsC,EAArD;;MACA,IAAIA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACF,MAAT,KAAoB,CAA5C,EAA+C;QAC3CE,QAAQ,GAAG,YAAX;MACH;;MACD,IAAI+B,QAAQ,GAAG5C,OAAO,CAAC6C,QAAR,GAAmB7C,OAAO,CAAC6C,QAA3B,GAAsC,CAArD;;MACA,IAAI,OAAI,CAAC/C,QAAL,CAAce,QAAd,CAAJ,EAA6B;QACzB,MAAMmB,QAAQ,GAAG,OAAI,CAAClC,QAAL,CAAce,QAAd,EAAwBgB,OAAxB,CAAgCG,QAAjD;QACAY,QAAQ,GACJA,QAAQ,IAAIZ,QAAZ,IAAwBY,QAAQ,IAAI,CAApC,GAAwCA,QAAxC,GAAmDZ,QAAQ,GAAG,CADlE;QAEA,OAAI,CAAClC,QAAL,CAAce,QAAd,EAAwBgB,OAAxB,CAAgCiB,WAAhC,GAA8CF,QAA9C;QACA,OAAOzC,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,gBADW;UAEnBD,MAAM,EAAE,IAFW;UAGnBE,KAAK,EAAEqC;QAHY,CAAhB,CAAP;MAKH,CAVD,MAWK;QACD,OAAOzC,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,gBADW;UAEnBD,MAAM,EAAE,KAFW;UAGnBI,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;IA9ByB;EA+B7B;EACD;AACJ;AACA;AACA;AACA;;;EACUsC,cAAc,CAAC/C,OAAD,EAAU;IAAA;;IAAA;MAC1B,IAAIA,OAAO,IAAI,IAAf,EAAqB;QACjB,OAAOG,OAAO,CAACC,OAAR,CAAgB;UACnBC,MAAM,EAAE,KADW;UAEnBC,MAAM,EAAE,gBAFW;UAGnBG,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;;MACD,IAAII,QAAQ,GAAGb,OAAO,CAACa,QAAR,GAAmBb,OAAO,CAACa,QAA3B,GAAsC,EAArD;;MACA,IAAIA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACF,MAAT,KAAoB,CAA5C,EAA+C;QAC3CE,QAAQ,GAAG,YAAX;MACH;;MACD,IAAI,OAAI,CAACf,QAAL,CAAce,QAAd,CAAJ,EAA6B;QACzB,MAAM+B,QAAQ,GAAG,OAAI,CAAC9C,QAAL,CAAce,QAAd,EAAwBgB,OAAxB,CAAgCiB,WAAjD;QACA,OAAO3C,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,gBADW;UAEnBD,MAAM,EAAE,IAFW;UAGnBE,KAAK,EAAEqC;QAHY,CAAhB,CAAP;MAKH,CAPD,MAQK;QACD,OAAOzC,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,gBADW;UAEnBD,MAAM,EAAE,KAFW;UAGnBI,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;IA1ByB;EA2B7B;EACD;AACJ;AACA;AACA;;;EACUuC,cAAc,GAAG;IAAA;;IAAA;MACnB,KAAK,MAAMC,CAAX,IAAgB,OAAI,CAACnD,QAArB,EAA+B;QAC3B,IAAI,OAAI,CAACA,QAAL,CAAcmD,CAAd,EAAiBC,OAArB,EAA8B;UAC1B,MAAMC,GAAG,GAAGC,QAAZ;;UACA,IAAID,GAAG,CAACE,uBAAR,EAAiC;YAC7B,MAAMF,GAAG,CAACG,oBAAJ,EAAN;UACH;QACJ;;QACD,IAAI,CAAC,OAAI,CAACxD,QAAL,CAAcmD,CAAd,EAAiBpB,OAAjB,CAAyB0B,MAA9B,EACI,OAAI,CAACzD,QAAL,CAAcmD,CAAd,EAAiBpB,OAAjB,CAAyBC,KAAzB;MACP;;MACD,OAAO3B,OAAO,CAACC,OAAR,CAAgB;QACnBE,MAAM,EAAE,gBADW;QAEnBD,MAAM,EAAE,IAFW;QAGnBE,KAAK,EAAE;MAHY,CAAhB,CAAP;IAXmB;EAgBtB;;EACDiB,SAAS,CAACxB,OAAD,EAAU;IACf,MAAMuB,UAAU,GAAG;MACfiC,KAAK,EAAExD,OAAO,CAACwD,KAAR,GAAgBxD,OAAO,CAACwD,KAAxB,GAAgC,GADxB;MAEfC,MAAM,EAAEzD,OAAO,CAACyD,MAAR,GAAiBzD,OAAO,CAACyD,MAAzB,GAAkC;IAF3B,CAAnB;IAIA,MAAMC,KAAK,GAAGnC,UAAU,CAACkC,MAAX,GAAoBlC,UAAU,CAACiC,KAA7C;;IACA,IAAIjC,UAAU,CAACiC,KAAX,GAAmBG,MAAM,CAACC,UAA9B,EAA0C;MACtCrC,UAAU,CAACiC,KAAX,GAAmBG,MAAM,CAACC,UAA1B;MACArC,UAAU,CAACkC,MAAX,GAAoBI,IAAI,CAACC,KAAL,CAAWvC,UAAU,CAACiC,KAAX,GAAmBE,KAA9B,CAApB;IACH;;IACD,IAAInC,UAAU,CAACkC,MAAX,GAAoBE,MAAM,CAACI,WAA/B,EAA4C;MACxCxC,UAAU,CAACkC,MAAX,GAAoBE,MAAM,CAACI,WAA3B;MACAxC,UAAU,CAACiC,KAAX,GAAmBK,IAAI,CAACC,KAAL,CAAWvC,UAAU,CAACkC,MAAX,GAAoBC,KAA/B,CAAnB;IACH;;IACD,OAAOnC,UAAP;EACH;;EACKE,sBAAsB,CAACb,GAAD,EAAMC,QAAN,EAAgBH,IAAhB,EAAsBI,IAAtB,EAA4BC,SAA5B,EAAuCK,SAAvC,EAAkDE,YAAlD,EAAgEC,UAAhE,EAA4E;IAAA;;IAAA;MACpG,MAAMyC,QAAQ,GAAGpD,GAAG,GACdA,GAAG,CAACqD,OAAJ,CAAY,KAAZ,KAAsB,CAAC,CAAvB,GACIC,SAAS,CAACtD,GAAD,CADb,GAEIA,GAHU,GAId,IAJN;MAKA,IAAIoD,QAAQ,KAAK,IAAjB,EACI,OAAO7D,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;MACJ,MAAM+D,cAAc,SAAS,OAAI,CAACC,oBAAL,CAA0BvD,QAA1B,EAAoCS,YAApC,CAA7B;MACA,IAAI6C,cAAc,KAAK,IAAvB,EACI,OAAOhE,OAAO,CAACC,OAAR,CAAgB;QACnBE,MAAM,EAAE,YADW;QAEnBD,MAAM,EAAE,KAFW;QAGnBI,OAAO,EAAE;MAHU,CAAhB,CAAP;MAKJ,IAAIC,IAAI,KAAK,UAAT,IAAuBa,UAAU,IAAI,IAAzC,EACI,OAAOpB,OAAO,CAACC,OAAR,CAAgB;QACnBE,MAAM,EAAE,YADW;QAEnBD,MAAM,EAAE,KAFW;QAGnBI,OAAO,EAAE;MAHU,CAAhB,CAAP,CAhBgG,CAqBpG;;MACA0D,cAAc,CAACE,gBAAf,CAAgC,iBAAhC,EAAoDC,EAAD,IAAQ;QACvD,OAAI,CAACC,gBAAL,CAAsBD,EAAE,CAACE,MAAzB;MACH,CAFD;MAGAL,cAAc,CAACE,gBAAf,CAAgC,kBAAhC,EAAqDC,EAAD,IAAQ;QACxD,OAAI,CAACG,iBAAL,CAAuBH,EAAE,CAACE,MAA1B;MACH,CAFD;MAGAL,cAAc,CAACE,gBAAf,CAAgC,kBAAhC,EAAqDC,EAAD,IAAQ;QACxD,IAAI5D,IAAI,KAAK,YAAb,EAA2B;UACvByD,cAAc,CAACO,MAAf;QACH;;QACD,OAAI,CAACC,iBAAL,CAAuBL,EAAE,CAACE,MAA1B;MACH,CALD;MAMAL,cAAc,CAACE,gBAAf,CAAgC,kBAAhC,EAAqDC,EAAD,IAAQ;QACxD,OAAI,CAACM,iBAAL,CAAuBN,EAAE,CAACE,MAA1B;MACH,CAFD;MAGAL,cAAc,CAACE,gBAAf,CAAgC,iBAAhC,EAAmD,MAAM;QACrD,IAAI3D,IAAI,KAAK,YAAb,EAA2B;UACvByD,cAAc,CAACO,MAAf;QACH;;QACD,OAAI,CAACG,gBAAL;MACH,CALD;;MAMA,IAAInE,IAAI,KAAK,UAAb,EAAyB;QACrB,OAAI,CAACZ,QAAL,CAAce,QAAd,IAA0B,IAAInB,WAAJ,CAAgB,UAAhB,EAA4BsE,QAA5B,EAAsCnD,QAAtC,EAAgDC,IAAhD,EAAsDC,SAAtD,EAAiEK,SAAjE,EAA4E+C,cAA5E,EAA4F,CAA5F,EAA+F5C,UAAU,CAACiC,KAA1G,EAAiHjC,UAAU,CAACkC,MAA5H,CAA1B;QACA,MAAM,OAAI,CAAC3D,QAAL,CAAce,QAAd,EAAwBiE,UAAxB,EAAN;MACH,CAHD,MAIK,IAAIpE,IAAI,KAAK,YAAb,EAA2B;QAC5B,OAAI,CAACZ,QAAL,CAAc,YAAd,IAA8B,IAAIJ,WAAJ,CAAgB,YAAhB,EAA8BsE,QAA9B,EAAwC,YAAxC,EAAsDlD,IAAtD,EAA4DC,SAA5D,EAAuEK,SAAvE,EAAkF+C,cAAlF,EAAkG,KAAlG,CAA9B;QACA,MAAM,OAAI,CAACrE,QAAL,CAAc,YAAd,EAA4BgF,UAA5B,EAAN;MACH,CAHI,MAIA;QACD,OAAO3E,OAAO,CAACC,OAAR,CAAgB;UACnBE,MAAM,EAAE,YADW;UAEnBD,MAAM,EAAE,KAFW;UAGnBI,OAAO,EAAE;QAHU,CAAhB,CAAP;MAKH;;MACD,OAAON,OAAO,CAACC,OAAR,CAAgB;QAAEE,MAAM,EAAE,YAAV;QAAwBD,MAAM,EAAE,IAAhC;QAAsCE,KAAK,EAAE;MAA7C,CAAhB,CAAP;IA1DoG;EA2DvG;;EACK6D,oBAAoB,CAACvD,QAAD,EAAWS,YAAX,EAAyB;IAAA;MAC/C,MAAM6C,cAAc,GAAGf,QAAQ,CAAC2B,aAAT,CAAuB,KAAvB,CAAvB;MACAZ,cAAc,CAACa,EAAf,GAAqB,MAAKnE,QAAS,EAAnC;;MACA,IAAIS,YAAY,IAAI,IAAhB,IAAwBA,YAAY,CAACX,MAAb,GAAsB,CAAlD,EAAqD;QACjD,MAAMsE,QAAQ,GAAG7B,QAAQ,CAAC8B,aAAT,CAAwB,GAAE5D,YAAa,EAAvC,CAAjB;QACA,IAAI2D,QAAQ,KAAK,IAAjB,EACI,OAAO9E,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;QACJ,IAAI+E,SAAS,GAAG,IAAhB;QACA,MAAMC,UAAU,GAAGH,QAAQ,CAACG,UAAT,GAAsBH,QAAQ,CAACG,UAA/B,GAA4C,IAA/D;;QACA,IAAIA,UAAU,IAAI,IAAlB,EAAwB;UACpBD,SAAS,GAAGC,UAAU,CAACF,aAAX,CAA0B,QAAOrE,QAAS,IAA1C,CAAZ;QACH,CAFD,MAGK;UACDsE,SAAS,GAAGF,QAAQ,CAACC,aAAT,CAAwB,QAAOrE,QAAS,IAAxC,CAAZ;QACH;;QACD,IAAIsE,SAAS,IAAI,IAAjB,EACIA,SAAS,CAACE,WAAV,CAAsBlB,cAAtB;QACJ,OAAOhE,OAAO,CAACC,OAAR,CAAgB+D,cAAhB,CAAP;MACH,CAfD,MAgBK;QACD,OAAOhE,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;MACH;IArB8C;EAsBlD;;EACDmE,gBAAgB,CAACe,IAAD,EAAO;IACnB,KAAKC,eAAL,CAAqB,wBAArB,EAA+CD,IAA/C;EACH;;EACDb,iBAAiB,CAACa,IAAD,EAAO;IACpB,KAAKC,eAAL,CAAqB,yBAArB,EAAgDD,IAAhD;EACH;;EACDX,iBAAiB,CAACW,IAAD,EAAO;IACpB,KAAKC,eAAL,CAAqB,yBAArB,EAAgDD,IAAhD;EACH;;EACDT,gBAAgB,GAAG;IACf,MAAMW,OAAO,GAAG;MAAEC,OAAO,EAAE;IAAX,CAAhB;IACA,KAAKF,eAAL,CAAqB,wBAArB,EAA+CC,OAA/C;EACH;;EACDZ,iBAAiB,CAACU,IAAD,EAAO;IACpB,KAAKC,eAAL,CAAqB,yBAArB,EAAgDD,IAAhD;EACH;;AAhnBkD"},"metadata":{},"sourceType":"module"}